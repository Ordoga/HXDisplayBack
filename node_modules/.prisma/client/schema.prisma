// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name     String
  email    String @unique
  password String

  orders Order[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name    String
  email   String
  message String

  status Status @default(UNREAD)
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name        String
  description String
  price       Decimal

  productColors ProductColor[]
  orderItems    OrderItem[]
}

model Color {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  hex  String

  productColors       ProductColor[]
  primaryOrderItems   OrderItem[]    @relation("PrimaryColorRelation")
  secondaryOrderItems OrderItem[]    @relation("SecondaryColorRelation")
}

model ProductColor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  colorId Int
  color   Color @relation(fields: [colorId], references: [id])

  imgs Img[]

  @@unique([productId, colorId]) // Ensure each pair is unique
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  primaryColorId Int
  primaryColor   Color @relation("PrimaryColorRelation", fields: [primaryColorId], references: [id])

  secondaryColorId Int?
  secondaryColor   Color? @relation("SecondaryColorRelation", fields: [secondaryColorId], references: [id])

  quantity        Int // How many units of this product in the order
  priceAtPurchase Decimal // Stores price at purchase time
}

model Img {
  id             Int          @id @default(autoincrement())
  url            String
  productColorId Int
  productColor   ProductColor @relation(fields: [productColorId], references: [id])
}

enum Status {
  UNREAD
  IN_PROGRESS
  DONE
}
